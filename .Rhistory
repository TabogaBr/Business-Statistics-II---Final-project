# Histogramme de la population originale
hist(dragons, xlim=c(0.25,29), ylim=c(0,0.7), main="Population originale", xlab="Envergures des ailes", probability = TRUE)
# Histogramme de la population originale
hist(dragons, xlim=c(0.25,29), ylim=c(0,0.7), main="Population originale", xlab="Envergures des ailes")
# Histogramme de la population originale
hist(dragons, xlim=c(0.25,29), ylim=c(0,0.7), main="Population originale", xlab="Envergures des ailes", probability = TRUE)
# Histogramme de la population originale
hist(dragons, xlim=c(0.25,29), ylim=c(0,0.7), main="Population originale", xlab="Envergures des ailes", probability = TRUE)
abline(v=mean(dragons), col="blue")
# Histogramme des moyennes pour taille 5
hist(moydragons5, xlim=c(0.25,29), ylim=c(0,0.7), main="Moyennes (taille 5)", xlab="Moyennes")
# Histogramme de la population originale
hist(dragons, xlim=c(0.25,29), ylim=c(0,0.7), main="Population originale", xlab="Envergures des ailes", probability = TRUE)
# Histogramme de la population originale
hist(dragons, xlim=c(0.25,29), ylim=c(0,0.7), main="Population originale", xlab="Envergures des ailes", probability = TRUE)
# Histogramme de la population originale
hist(dragons, xlim=c(0.25,29), ylim=c(0,0.7), main="Population originale", xlab="Envergures des ailes", probability = TRUE)
## 3.1
par(mfrow=c(2,2))
# Histogramme de la population originale
hist(dragons, xlim=c(0.25,29), ylim=c(0,0.7), main="Population originale", xlab="Envergures des ailes", probability = TRUE)
abline(v=mean(dragons), col="blue")
# Histogramme des moyennes pour taille 5
hist(moydragons5, xlim=c(0.25,29), ylim=c(0,0.7), main="Moyennes (taille 5)", xlab="Moyennes", probability = TRUE)
abline(v=mean(dragons), col="blue")
# Histogramme des moyennes pour taille 20
hist(moydragons20, xlim=c(0.25,29), ylim=c(0,0.7), main="Moyennes (taille 20)", xlab="Moyennes", probability = TRUE)
abline(v=mean(dragons), col="blue")
# Histogramme des moyennes pour taille 100
hist(moydragons100, xlim=c(0.25,29), ylim=c(0,0.7), main="Moyennes (taille 100)", xlab="Moyennes", probability = TRUE)
abline(v=mean(dragons), col="blue")
## 4.1
moydragons = mean(dragons)
vardragons = var(dragons)
mean_moydragons5 = mean(moydragons5)
mean_moydragons20 = mean(moydragons20)
mean_moydragons100 = mean(moydragons100)
var_moydragons5 = var(moydragons5)
var_moydragons20 = var(moydragons20)
var_moydragons100 = var(moydragons100)
## 5
# Comparaison des moments
moydragons == mean_moydragons5 == mean_moydragons20 == mean_moydragons100
## 5
# Comparaison des moments
result = moydragons == mean_moydragons5 == mean_moydragons20 == mean_moydragons100
## 5
# Comparaison des moments
moydragons == mean_moydragons5 == mean_moydragons20 == mean_moydragons100
## 5
# Comparaison des moments
moydragons == mean_moydragons5
setwd("C:/Users/brend/Documents/R")
dragons = scan("dragons_wing_span.txt")
length(dragons)
dragons[1:10]
summary(dragons)
## 1.1
# Histogramme
hist(dragons, main="Histogramme de l'envergure des ailes de dragons", xlab="Envergure des ailes", probability = TRUE)
source("myqqnorm.R")
## 1.2
my.qqnorm(dragons)
# On peut voir que la distributiom ne suit pas une loi normale, car les points
# du QQ Plot ne se situent pas près de la diagonale rouge
## 2.1
source("moyennes.R")
## 2.2
moydragons5 = moyennes(dragons, 5)
moydragons20 = moyennes(dragons, 20)
moydragons100 = moyennes(dragons, 100)
## 2.3
hist(moydragons5, main="Moyennes (taille 5)", xlab="Moyennes", probability = TRUE)
my.qqnorm(moydragons5)
hist(moydragons20, main="Moyennes (taille 20)", xlab="Moyennes")
my.qqnorm(moydragons20)
hist(moydragons100, main="Moyennes (taille 100)", xlab="Moyennes")
my.qqnorm(moydragons100)
# On se rapproche de plus en plus d'une distribution normale
## 3.1
par(mfrow=c(2,2))
# Histogramme de la population originale
hist(dragons, xlim=c(0.25,29), ylim=c(0,0.7), main="Population originale", xlab="Envergures des ailes", probability = TRUE)
abline(v=mean(dragons), col="blue")
# Histogramme des moyennes pour taille 5
hist(moydragons5, xlim=c(0.25,29), ylim=c(0,0.7), main="Moyennes (taille 5)", xlab="Moyennes", probability = TRUE)
abline(v=mean(dragons), col="blue")
# Histogramme des moyennes pour taille 20
hist(moydragons20, xlim=c(0.25,29), ylim=c(0,0.7), main="Moyennes (taille 20)", xlab="Moyennes", probability = TRUE)
abline(v=mean(dragons), col="blue")
# Histogramme des moyennes pour taille 100
hist(moydragons100, xlim=c(0.25,29), ylim=c(0,0.7), main="Moyennes (taille 100)", xlab="Moyennes", probability = TRUE)
abline(v=mean(dragons), col="blue")
# Rétablir la mise en page graphique
par(mfrow=c(1,1))
## 4.1
moydragons = mean(dragons)
vardragons = var(dragons)
mean_moydragons5 = mean(moydragons5)
var_moydragons5 = var(moydragons5)
mean_moydragons20 = mean(moydragons20)
var_moydragons20 = var(moydragons20)
mean_moydragons100 = mean(moydragons100)
var_moydragons100 = var(moydragons100)
## 5
# Comparaison des moments
moydragons == mean_moydragons5
# etc...
setwd("C:/Users/brend/Documents/R")
rabbits = scan("rabbits.tex")
length(rabbits)
rabbits[1:10]
summary(rabbits)
source("myqqnorm.R")
# 2.1
sample(rabbits, 5)
# 2.2
# Pour garantir la reproductibilité
set.seed(7)
# 2.3
moyennes = function(donnees, taille) {
set.seed(7)
poids_moyens = numeric(1200) # Vecteur stockant les poids moyens
for (i in 1:1200) {
echantillon = sample(donnees, taille)
poids_moyens[i] = mean(echantillon)
}
return (poids_moyens)
}
moyennes_5 = moyennes(rabbits, 5)
moyennes_5
# 2.4
hist(moyennes_5, breaks=20, xlim = c(0.3, 2.2), ylim = c(0, 300), col = "lightblue",
xlab = "Poids Moyen", ylab = "Fréquence", main = "Histogramme des Poids Moyens")
# Moyenne de la population originale
abline(v = mean(rabbits), col="blue", lwd=2)
# Moyenne des poids moyens
abline(v = mean(moyennes_5), col="red", lwd=2)
# 2.5
my.qqnorm(moyennes_5)
# 3
moyennes_20 = moyennes(rabbits, 20)
moyennes_20
hist(moyennes_20, breaks=20, xlim = c(0.3, 2.2), ylim = c(0, 300), col = "lightblue",
xlab = "Poids Moyen", ylab = "Fréquence", main = "Histogramme des Poids Moyens")
# Moyenne de la population originale
abline(v = mean(rabbits), col="blue", lwd=2)
# Moyenne des poids moyens
abline(v = mean(moyennes_20), col="red", lwd=2)
# 4
moyennes_100 = moyennes(rabbits, 100)
moyennes_100
hist(moyennes_100, breaks=20, xlim = c(0.3, 2.2), ylim = c(0, 300), col = "lightblue",
xlab = "Poids Moyen", ylab = "Fréquence", main = "Histogramme des Poids Moyens")
# Moyenne de la population originale
abline(v = mean(rabbits), col="blue", lwd=2)
# Moyenne des poids moyens
abline(v = mean(moyennes_100), col="red", lwd=2)
# 5.1 (Voir la fonction "moyennes")
# 5.2 (Voir les exos du dessus)
# 5.3 Comparaisons
# Fenêtre graphique de 4x1
par(mfrow = c(4, 1))
# Histogramme de la population originale de lapins
hist(rabbits, xlim = c(0.5, 2), ylim = c(0, 22), main = "Population originale de lapins",
xlab = "Poids", ylab = "Fréquence", probability = TRUE)
setwd("C:/Users/brend/Documents/R")
rm(list=ls())
# Import des données
shaft = read.table("Shafts.txt", header = T)
dim(shaft)
head(shaft, 10)
# 2) Visualisation des données
matplot(shaft, type="p")
# 2) Visualisation des données
matplot(shaft, type="l")
# 2) Visualisation des données
matplot(shaft, type="p", lty=1)
# 2) Visualisation des données
matplot(shaft, type="p")
abline(h = 815, col = "red", lty = 2)
abline(h = 815, col = "red", lty = 1)
# 2) Visualisation des données
matplot(shaft, type="p", pch = 19)
# 2) Visualisation des données
matplot(shaft, type="p", pch = 1)
# 2) Visualisation des données
matplot(shaft, type = "p", pch = 1, col = "black")
abline(h = 815, col = "red", lty = 1)
# 3) Calcul et visualisations des moyennes échantillonnales
moyennes_journ = apply(shaft)
# 3) Calcul et visualisations des moyennes échantillonnales
moyennes_journ = apply(shaft, 2)
# 3) Calcul et visualisations des moyennes échantillonnales
moyennes_journ = apply(shaft, 2, mean)
moyennes_journ
# 3) Calcul et visualisations des moyennes échantillonnales
moyennes_journ = apply(shaft, 1, mean)
moyennes_journ
# 3) Calcul et visualisations des moyennes échantillonnales
moyennes_journ = apply(shaft, 2, mean)
moyennes_journ
head(shaft, 10)
setwd("C:/Users/brend/Documents/R")
# Import des données
shaft = read.table("Shafts.txt", header = T)
dim(shaft)
head(shaft, 10)
# 1) Informations descriptives
## ...
# 2) Visualisation des données
matplot(shaft, type = "p", pch = 1, col = "black")
abline(h = 815, col = "red", lty = 1)
# 3) Calcul et visualisations des moyennes échantillonnales
moyennes_journ = apply(shaft, 2, mean)
moyennes_journ
# 3) Calcul et visualisations des moyennes échantillonnales
moyennes_journ = apply(shaft, 1, mean)
moyennes_journ
# 3.2)
plot(moyennes_journ, type = "o", ylim = c(800, 830), xlab = "Jours", ylab = "Moyenne échantillonnale")
abline(h = 815, col = "red", lty = 1)
# 3.2)
plot(moyennes_journ, type = "o", ylim = c(810, 820), xlab = "Jours", ylab = "Moyenne échantillonnale")
abline(h = 815, col = "red", lty = 1)
# 3.2)
plot(moyennes_journ, type = "o", ylim = c(813, 818), xlab = "Jours", ylab = "Moyenne échantillonnale")
# 3.2)
plot(moyennes_journ, type = "o", ylim = c(814, 817), xlab = "Jours", ylab = "Moyenne échantillonnale")
abline(h = 815, col = "red", lty = 1)
# 4) LCL, UCL et Carte de Contrôle
lcl = 815 - 3 / sqrt(25)
lcl
ucl = 815 + 3 / sqrt(25)
ucl
abline(h = lcl, col = "blue", lty = 1)
abline(h = ucl, col = "green", lty = 1)
# 3.2)
plot(moyennes_journ, type = "o", ylim = c(814, 816), xlab = "Jours", ylab = "Moyenne échantillonnale")
abline(h = 815, col = "red", lty = 1)
abline(h = lcl, col = "blue", lty = 1)
abline(h = ucl, col = "green", lty = 1)
setwd("C:/Users/brend/Documents/R")
# Import des données
shaft = read.table("Shafts.txt", header = T)
dim(shaft)
head(shaft, 10)
# 1) Informations descriptives
## ...
# 2) Visualisation des données
matplot(shaft, type = "p", pch = 1, col = "black")
abline(h = 815, col = "red", lty = 1)
# 3.1) Calcul et visualisations des moyennes échantillonnales
moyennes_journ = apply(shaft, 1, mean)
## Le 1 permet de faire la moyenne des lignes (la moyenne pour les 80 jours)
moyennes_journ
# 3.2)
plot(moyennes_journ, type = "o", ylim = c(814, 816), xlab = "Jours", ylab = "Moyenne échantillonnale")
abline(h = 815, col = "red", lty = 1)
# Il faut modifier le ylim pour pouvoir voir mieux les variations
# 4) LCL, UCL et Carte de Contrôle
lcl = 815 - 3 / sqrt(25)
lcl
ucl = 815 + 3 / sqrt(25)
ucl
abline(h = lcl, col = "blue", lty = 1)
abline(h = ucl, col = "green", lty = 1)
# 5) Fausse alarme (Erreur de Type I)
proba_erreur_UCL = 1 - pnorm(ucl, mean = 815, sd = 1)
proba_erreur_UCL
# 5) Fausse alarme (Erreur de Type I)
proba_erreur = 1 - 0.9974
proba_erreur
rm(proba_erreur_UCL)
ucl_2 = 815 + 2 / sqrt(25)
abline(h = lcl, col = blue, lty = 2)
abline(h = lcl, col = "blue", lty = 2)
abline(h = ucl, col = "green", lty = 2)
abline(h = lcl_2, col = "blue", lty = 2)
# 5.2) Il faut les construire avec 2 écarts-types
lcl_2 = 815 - 2 / sqrt(25)
ucl_2 = 815 + 2 / sqrt(25)
abline(h = lcl_2, col = "blue", lty = 2)
abline(h = ucl_2, col = "green", lty = 2)
proba_erreur_2 = 1 - 0.9544
proba_erreur_2
rm()
rm(list=ls())
# 2.2)
mu = 1.01
sigma = sqrt(0.045)
lcl = 1.01 - 3 * sigma / sqrt(36)
lcl = mu - 3 * sigma / sqrt(36)
ucl = mu + 3 * sigma / sqrt(36)
# 2.3)
xbar = c(1.024, 1.002, 1.012, 0.995, 1.028, 0.991, 0.996, 1.018, 1, 1.004, 1, 1.0025,
1.02, 1.01, 1.001, 1.028, 1.005, 1.03, 0.992, 1.02, 1.015, 0.996, 0.98, 1.022)
# 2.4)
plot(xbar, type = "b", xlab = "Échantillon", ylab = "Contenu moyen du pot de peinture", main = "Carte de Contrôle")
bline(h = mu, col = "red", lty = 2, lwd = 2)  # Ligne pour μ (en rouge)
abline(h = mu, col = "red", lty = 2, lwd = 2)  # Ligne pour μ (en rouge)
abline(h = LCL, col = "blue", lty = 2, lwd = 2)  # Ligne pour LCL (en bleu)
abline(h = lcl, col = "blue", lty = 2, lwd = 2)  # Ligne pour LCL (en bleu)
# 2.4)
plot(xbar, type = "b", xlim = c(0, 25), ylim = c(0.80, 1.2),
xlab = "Échantillon", ylab = "Contenu moyen du pot de peinture", main = "Carte de Contrôle")
# 2.4)
plot(xbar, type = "b", xlim = c(0, 24), ylim = c(0.80, 1.2),
xlab = "Échantillon", ylab = "Contenu moyen du pot de peinture", main = "Carte de Contrôle")
# 2.4)
plot(xbar, type = "b", xlim = c(0, 24), ylim = c(0.89, 1.12),
xlab = "Échantillon", ylab = "Contenu moyen du pot de peinture",
main = "Carte de Contrôle")
abline(h = lcl, col = "blue", lty = 2, lwd = 2)  # Ligne pour LCL (en bleu)
abline(h = ucl, col = "blue", lty = 2, lwd = 2)  # Ligne pour UCL (en bleu)
# 2.2)
mu = 1.01
sigma = 0.045
lcl = mu - 3 * sigma / sqrt(36)
ucl = mu + 3 * sigma / sqrt(36)
# 2.3)
xbar = c(1.024, 1.002, 1.012, 0.995, 1.028, 0.991, 0.996, 1.018, 1, 1.004, 1, 1.0025,
1.02, 1.01, 1.001, 1.028, 1.005, 1.03, 0.992, 1.02, 1.015, 0.996, 0.98, 1.022)
# 2.4)
plot(xbar, type = "b", xlim = c(0, 24), ylim = c(0.89, 1.12),
xlab = "Échantillon", ylab = "Contenu moyen du pot de peinture",
main = "Carte de Contrôle")
abline(h = mu, col = "red", lty = 2, lwd = 2)  # Ligne pour μ (en rouge)
abline(h = lcl, col = "blue", lty = 2, lwd = 2)  # Ligne pour LCL (en bleu)
abline(h = ucl, col = "blue", lty = 2, lwd = 2)  # Ligne pour UCL (en bleu)
legend("topleft", legend = c("μ", "LCL/UCL"), col = c("red", "blue"), lty = c(2, 2), lwd = c(2, 2))
# 2.4)
plot(xbar, type = "b", xlim = c(0, 24), ylim = c(0.97, 1.04),
xlab = "Échantillon", ylab = "Contenu moyen du pot de peinture",
main = "Carte de Contrôle")
# 2.4)
plot(xbar, type = "b", xlim = c(0, 24), ylim = c(0.98, 1.04),
xlab = "Échantillon", ylab = "Contenu moyen du pot de peinture",
main = "Carte de Contrôle")
# 2.4)
plot(xbar, type = "b", xlim = c(0, 24), ylim = c(0.97, 1.04),
xlab = "Échantillon", ylab = "Contenu moyen du pot de peinture",
main = "Carte de Contrôle")
# 2.4)
plot(xbar, type = "b", xlim = c(0, 24), ylim = c(0.97, 1.04),
xlab = "Échantillon", ylab = "Contenu moyen du pot de peinture",
main = "Carte de Contrôle")
abline(h = mu, col = "red", lty = 2, lwd = 2)  # Ligne pour μ (en rouge)
abline(h = lcl, col = "blue", lty = 2, lwd = 2)  # Ligne pour LCL (en bleu)
abline(h = ucl, col = "blue", lty = 2, lwd = 2)  # Ligne pour UCL (en bleu)
legend("topleft", legend = c("μ", "LCL/UCL"), col = c("red", "blue"), lty = c(2, 2), lwd = c(2, 2))
# 2.4)
plot(xbar, type = "b", xlim = c(0, 24), ylim = c(0.97, 1.04),
xlab = "Échantillon", ylab = "Contenu moyen du pot de peinture",
main = "Carte de Contrôle")
abline(h = mu, col = "red", lty = 2, lwd = 2)  # Ligne pour μ (en rouge)
abline(h = lcl, col = "blue", lty = 2, lwd = 2)  # Ligne pour LCL (en bleu)
abline(h = ucl, col = "blue", lty = 2, lwd = 2)  # Ligne pour UCL (en bleu)
# 1) Informations descriptives
colnames(shaft)
setwd("C:/Users/brend/Documents/R")
# Import des données
shaft = read.table("Shafts.txt", header = T)
dim(shaft)
head(shaft, 10)
# 1) Informations descriptives
colnames(shaft)
# 2) Visualisation des données
matplot(shaft, type = "p", pch = 1, col = "black")
abline(h = 815, col = "red", lty = 1)
# 3.1) Calcul et visualisations des moyennes échantillonnales
moyennes_journ = apply(shaft, 1, mean)
## Le 1 permet de faire la moyenne des lignes (la moyenne pour les 80 jours)
moyennes_journ
# 3.2)
plot(moyennes_journ, type = "o", ylim = c(814, 816), xlab = "Jours", ylab = "Moyenne échantillonnale")
abline(h = 815, col = "red", lty = 1)
# Il faut modifier le ylim pour pouvoir voir mieux les variations
# 4) LCL, UCL et Carte de Contrôle
lcl = 815 - 3 / sqrt(25)
lcl
ucl = 815 + 3 / sqrt(25)
ucl
abline(h = lcl, col = "blue", lty = 1)
abline(h = ucl, col = "green", lty = 1)
# 5.1) Fausse alarme (Erreur de Type I)
proba_erreur = 1 - 0.9974
proba_erreur
# 5.2) Il faut les construire avec 2 écarts-types
lcl_2 = 815 - 2 / sqrt(25)
ucl_2 = 815 + 2 / sqrt(25)
abline(h = lcl_2, col = "blue", lty = 2)
abline(h = ucl_2, col = "green", lty = 2)
proba_erreur_2 = 1 - 0.9544
proba_erreur_2
# 1) Informations descriptives
colnames(shaft)
rownames(shaft)
## Le 1 permet de faire la moyenne des lignes (la moyenne pour les 80 jours)
moyennes_journ
rm(list=ls())
library("tseries")
ibm = get.hist.quote(instrument = "IBM", start = "2009-02-01", end = "2015-12-31",
quote = c("A", "V"), provider = "yahoo", compression = "m", retclass = "zoo")
names(ibm)
logprices = log(ibm$Adjusted)
r = diff(logprices)
length(r)
# Visualisation des données
par(mfrow = c(2, 1))
plot(ibm$Adjusted, main = "Adjusted Closing Prices", xlab = "time")
plot(r, main = "Returns", xlab = "time")
abline(h = 0, col = "blue")
rm(list=ls())
d1=read.table("student-mat.csv",sep=";",header=TRUE)
d2=read.table("student-por.csv",sep=";",header=TRUE)
d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
print(nrow(d3)) # 382 students
setwd("C:/Users/brend/Documents/R")
students_health = read.csv("student-mat.csv")
attach(students_health)
data = students_health[sample(nrow(students_health), 5), c(5,8,9,13)]
data
rm(list=ls())
data
students_health
setwd("C:/Users/brend/Documents/R")
students_health = read.csv("student-mat.csv")
students_health
View(students_health)
attach(students_health)
setwd("C:/Users/brend/Documents/R")
students_health = read.csv("student-mat.csv")
attach(students_health)
students_health = read.table("student-mat.csv")
rm(list=ls())
setwd("C:/Users/brend/Documents/R")
students_health = read.table("student-mat.csv")
setwd("C:/Users/brend/Documents/R")
students_health = read.table("student-mat.csv", sep=",", header = TRUE)
attach(students_health)
View(students_health)
setwd("C:/Users/brend/Documents/R")
students_health = read.table("student-mat.csv", sep=";", header = TRUE)
attach(students_health)
data = students_health[sample(nrow(students_health), 5), c(5,8,9,13)]
data
data = students_health[sample(nrow(students_health), ), c(5, 22, 25, 29)]
data
data = students_health[sample(nrow(students_health), ), c(5, 22, 25, 33)]
data
data = students_health[ , c(5, 22, 25, 33)]
setwd("C:/Users/brend/Documents/R")
setwd("C:/Users/brend/Documents/R")
students_health = read.table("student-mat.csv", sep=";", header = TRUE)
attach(students_health)
data = students_health[ , c(5, 22, 25, 33)]
rm(list=ls())
setwd("C:/Users/brend/Documents/R")
students_health = read.table("student-mat.csv", sep=";", header = TRUE)
attach(students_health)
data = students_health[ , c(5, 22, 25, 33)]
data
data = students_health[ , c($famsize, 22, 25, 33)]
data = students_health[ , c(famsize, 22, 25, 33)]
setwd("C:/Users/brend/Documents/R")
students_health = read.table("student-mat.csv", sep=";", header = TRUE)
attach(students_health)
data = students_health[ , c(5, 22, 25, 33)]
data
setwd("C:/Users/brend/Documents/R")
students_health = read.table("student_portugal.csv", sep=";", header = TRUE)
rm(list=ls())
setwd("C:/Users/brend/Documents/R")
students_health = read.table("student_portugal.csv", sep=";", header = TRUE)
attach(students_health)
setwd("C:\Users\brend\Documents\MasterComputerScience\Statistique Inférentielle\Business Statistics II - Final project")
setwd("C:/Users/brend/Documents/MasterComputerScience/Statistique Inférentielle/Business Statistics II - Final project")
#PART I: Descriptive Statistics
getwd()
data =read.table("student-mat.csv",sep=";",header=TRUE)
#PART I: Descriptive Statistics
getwd()
data =read.table("student-mat.csv",sep=";",header=TRUE)
#PART I: Descriptive Statistics
getwd()
data =read.table("student-mat.csv",sep=";",header=TRUE)
rm(list=ls())
#PART I: Descriptive Statistics
getwd()
data =read.table("student-mat.csv",sep=";",header=TRUE)
names(data)
head(data,10)
dim(data)
attach(data)
famsize
internet
freetime
absences
G3
exemplesample = data[sample(nrow(data),5), c(5,8,9,13)]
#make our data in numeric :famsize
famsize[famsize=="LE3"] = 0 #3 or samller than 3
famsize[famsize=="GT3"] = 1 #bigger than 3 famsize
famsize=as.numeric(famsize) #make our data numeric
famsize
#make our data in numeric :internet
internet[internet=="no"] = 0 #non acces to internet
internet[internet=="yes"] = 1 #access to internet
internet
internet=as.numeric(internet) #make our data numeric
internet
